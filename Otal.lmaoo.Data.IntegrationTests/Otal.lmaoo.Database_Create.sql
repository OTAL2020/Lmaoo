/*
Deployment script for Otal.lmaoo.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Otal.lmaoo.Database"
:setvar DefaultFilePrefix "Otal.lmaoo.Database"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Ticket]...';


GO
CREATE TABLE [dbo].[Ticket] (
    [TicketId]   INT          IDENTITY (1, 1) NOT NULL,
    [Summary]    VARCHAR (50) NOT NULL,
    [FeatureId]  INT          NOT NULL,
    [ReporterId] INT          NULL,
    [AssigneeId] INT          NULL,
    [Created]    DATETIME     NOT NULL,
    [Updated]    DATETIME     NOT NULL,
    [Progress]   VARCHAR (20) NOT NULL,
    [Deadline]   DATETIME     NULL,
    [Active]     BIT          NOT NULL,
    CONSTRAINT [PK_Ticket_TicketId] PRIMARY KEY CLUSTERED ([TicketId] ASC)
);


GO
PRINT N'Creating Table [dbo].[ProjectAccess]...';


GO
CREATE TABLE [dbo].[ProjectAccess] (
    [ProjectAccessId] INT IDENTITY (1, 1) NOT NULL,
    [UserId]          INT NOT NULL,
    [ProjectId]       INT NOT NULL,
    [ManagerAccess]   BIT NOT NULL,
    CONSTRAINT [PK_ProjectAccess_ProjectAccessId] PRIMARY KEY CLUSTERED ([ProjectAccessId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Feature]...';


GO
CREATE TABLE [dbo].[Feature] (
    [FeatureId] INT          IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (50) NOT NULL,
    [ProjectId] INT          NOT NULL,
    [Active]    BIT          NULL,
    CONSTRAINT [PK_Feature_FeatureId] PRIMARY KEY CLUSTERED ([FeatureId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Comment]...';


GO
CREATE TABLE [dbo].[Comment] (
    [CommentId] INT           IDENTITY (1, 1) NOT NULL,
    [Content]   VARCHAR (255) NOT NULL,
    [Created]   DATETIME      NOT NULL,
    [TicketId]  INT           NULL,
    [UserId]    INT           NULL,
    CONSTRAINT [PK_Comment_CommentId] PRIMARY KEY CLUSTERED ([CommentId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Project]...';


GO
CREATE TABLE [dbo].[Project] (
    [ProjectId] INT          IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (20) NOT NULL,
    [Status]    VARCHAR (20) NOT NULL,
    [OwnerId]   INT          NOT NULL,
    [Active]    BIT          NOT NULL,
    CONSTRAINT [PK_Project_ProjectId] PRIMARY KEY CLUSTERED ([ProjectId] ASC)
);


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]   INT            IDENTITY (1, 1) NOT NULL,
    [Username] NVARCHAR (15)  NOT NULL,
    [Password] NVARCHAR (255) NOT NULL,
    [Forename] NVARCHAR (30)  NOT NULL,
    [Surname]  NVARCHAR (30)  NOT NULL,
    [Level]    SMALLINT       NOT NULL,
    [IsActive] BIT            NOT NULL,
    [Picture]  VARCHAR (100)  NOT NULL,
    CONSTRAINT [PK_User_UserId] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD DEFAULT NULL FOR [ReporterId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD DEFAULT NULL FOR [AssigneeId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD DEFAULT CURRENT_TIMESTAMP FOR [Created];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD DEFAULT 'Open' FOR [Progress];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ProjectAccess]...';


GO
ALTER TABLE [dbo].[ProjectAccess]
    ADD DEFAULT '0' FOR [ManagerAccess];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Feature]...';


GO
ALTER TABLE [dbo].[Feature]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment]
    ADD DEFAULT CURRENT_TIMESTAMP FOR [Created];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment]
    ADD DEFAULT NULL FOR [TicketId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment]
    ADD DEFAULT NULL FOR [UserId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Project]...';


GO
ALTER TABLE [dbo].[Project]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT '1' FOR [Level];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT '~/img/avatar.jpg' FOR [Picture];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Ticket_AssigneeId]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD CONSTRAINT [FK_Ticket_AssigneeId] FOREIGN KEY ([AssigneeId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Ticket_FeatureKey]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD CONSTRAINT [FK_Ticket_FeatureKey] FOREIGN KEY ([FeatureId]) REFERENCES [dbo].[Feature] ([FeatureId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Ticket_ReporterId]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD CONSTRAINT [FK_Ticket_ReporterId] FOREIGN KEY ([ReporterId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ProjectAccess_ProjectId]...';


GO
ALTER TABLE [dbo].[ProjectAccess]
    ADD CONSTRAINT [FK_ProjectAccess_ProjectId] FOREIGN KEY ([ProjectId]) REFERENCES [dbo].[Project] ([ProjectId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ProjectAccess_UserId]...';


GO
ALTER TABLE [dbo].[ProjectAccess]
    ADD CONSTRAINT [FK_ProjectAccess_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Feature_ProjectId]...';


GO
ALTER TABLE [dbo].[Feature]
    ADD CONSTRAINT [FK_Feature_ProjectId] FOREIGN KEY ([ProjectId]) REFERENCES [dbo].[Project] ([ProjectId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Comment_TicketId]...';


GO
ALTER TABLE [dbo].[Comment]
    ADD CONSTRAINT [FK_Comment_TicketId] FOREIGN KEY ([TicketId]) REFERENCES [dbo].[Ticket] ([TicketId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Comment_UserId]...';


GO
ALTER TABLE [dbo].[Comment]
    ADD CONSTRAINT [FK_Comment_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Project_UserId]...';


GO
ALTER TABLE [dbo].[Project]
    ADD CONSTRAINT [FK_Project_UserId] FOREIGN KEY ([OwnerId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Procedure [dbo].[Ticket_GetByFeatureId]...';


GO
CREATE PROCEDURE [dbo].[Ticket_GetByFeatureId]
	@FeatureId INT
AS
	SET NOCOUNT ON

    SELECT 
        t.[TicketId],
        t.[Summary],
        t.[Created],
        t.[Updated],
        t.[Progress],
        t.[ReporterId],
        t.[AssigneeId], 
        CONCAT(u.forename, ' ' ,u.surname) AS ReporterName, 
        u.[Username] AS ReporterUsername, 
        CONCAT(u2.forename, ' ' ,u2.surname) AS AssigneeName, 
        u2.[Username] AS AssigneeUsername
    FROM [dbo].[Ticket] t
        INNER JOIN [dbo].[User] u ON u.userId = t.[ReporterId]
        INNER JOIN [dbo].[User] u2 ON u2.userId = t.[AssigneeId]
    WHERE 
        t.[FeatureId] = @FeatureId
GO
PRINT N'Creating Procedure [dbo].[Ticket_Delete]...';


GO
CREATE PROCEDURE [dbo].[Ticket_Delete]
	@TicketId INT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Ticket]
    SET
        [Active] = 0
    WHERE
        [TicketId] = @TicketId
GO
PRINT N'Creating Procedure [dbo].[Ticket_Update]...';


GO
CREATE PROCEDURE [dbo].[Ticket_Update]
    @Summary VARCHAR(50),
    @Progress VARCHAR(20),
    @Deadline DATETIME,
	@FeatureId INT,
    @TicketId INT,
    @AssigneeId INT,
    @Active BIT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Ticket]
    SET
        [Summary] = @Summary,
        [AssigneeId] = @AssigneeId,
        [Progress] = @Progress,
        [Deadline] = @Deadline,
        [FeatureId] = @FeatureId,
        [Updated] = GETUTCDATE()
    WHERE
        [TicketId] = @TicketId

    SELECT * from [dbo].[Ticket] WHERE TicketId = @TicketId
GO
PRINT N'Creating Procedure [dbo].[Ticket_Create]...';


GO
CREATE PROCEDURE [dbo].[Ticket_Create]
	@Summary VARCHAR(50),
    @FeatureId INT,
    @ReporterId INT
AS
	SET NOCOUNT ON

    INSERT INTO [dbo].[Ticket]
    (
        [Summary],
        [FeatureId],
        [ReporterId]
    )
    VALUES
    (
        @Summary,
        @FeatureId,
        @ReporterId
    )

    SELECT * from [dbo].[Ticket] WHERE TicketId = SCOPE_IDENTITY()
GO
PRINT N'Creating Procedure [dbo].[Feature_Create]...';


GO
CREATE PROCEDURE [dbo].[Feature_Create]
	@Name VARCHAR(50),
    @ProjectId INT
AS
	SET NOCOUNT ON

    INSERT INTO [dbo].[Feature]
    (
        [Name],
        [ProjectId]
    )
    VALUES
    (
        @Name,
        @ProjectId
    )

    SELECT * from [dbo].[Feature] WHERE FeatureId = SCOPE_IDENTITY()
GO
PRINT N'Creating Procedure [dbo].[Feature_GetInactiveByProjectId]...';


GO
CREATE PROCEDURE [dbo].[Feature_GetInactiveByProjectId]
	@ProjectId INT
AS
	SET NOCOUNT ON

    SELECT 
        [FeatureId],
        [Name],
        [ProjectId],
        [Active]
    FROM 
        [dbo].[Feature]
    WHERE 
        [ProjectId] = @ProjectId AND 
        [Active] = 0
GO
PRINT N'Creating Procedure [dbo].[Feature_GetActiveByProjectId]...';


GO
CREATE PROCEDURE [dbo].[Feature_GetActiveByProjectId]
	@ProjectId INT
AS
	SET NOCOUNT ON

    SELECT 
        [FeatureId],
        [Name],
        [ProjectId],
        [Active]
    FROM 
        [dbo].[Feature]
    WHERE 
        [ProjectId] = @ProjectId AND 
        [Active] = 1
GO
PRINT N'Creating Procedure [dbo].[Feature_Delete]...';


GO
CREATE PROCEDURE [dbo].[Feature_Delete]
	@FeatureId INT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Feature]
    SET
        [Active] = 0
    WHERE
        [FeatureId] = @FeatureId
GO
PRINT N'Creating Procedure [dbo].[Feature_Update]...';


GO
CREATE PROCEDURE [dbo].[Feature_Update]
    @Name VARCHAR(50),
    @ProjectId INT,
	@FeatureId INT,
    @Active BIT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Feature]
    SET
        [Name] = @Name,
        [ProjectId] = @ProjectId,
        [Active] = @Active
    WHERE
        [FeatureId] = @FeatureId
GO
PRINT N'Creating Procedure [dbo].[Feature_GetById]...';


GO
CREATE PROCEDURE [dbo].[Feature_GetById]
	@FeatureId INT
AS
	SET NOCOUNT ON

    SELECT 
        [FeatureId],
        [Name],
        [ProjectId],
        [Active]
    FROM 
        [dbo].[Feature]
    WHERE 
        [FeatureId] = @FeatureId AND 
        [Active] = 1
GO
PRINT N'Creating Procedure [dbo].[Ticket_GetById]...';


GO
CREATE PROCEDURE [dbo].[Ticket_GetById]
	@TicketId INT
AS
	SET NOCOUNT ON

    SELECT 
        t.[TicketId],
        t.[Summary],
        t.[Created],
        t.[Updated],
        t.[Progress],
        t.[ReporterId],
        t.[AssigneeId], 
        CONCAT(u.forename, ' ' ,u.surname) AS ReporterName, 
        u.[Username] AS ReporterUsername, 
        CONCAT(u2.forename, ' ' ,u2.surname) AS AssigneeName, 
        u2.[Username] AS AssigneeUsername
    FROM [dbo].[Ticket] t
        INNER JOIN [dbo].[User] u ON u.[UserId] = t.[ReporterId]
        INNER JOIN [dbo].[User] u2 ON u2.[UserId] = t.[AssigneeId]
    WHERE 
        t.[TicketId] = @TicketId
GO
PRINT N'Creating Procedure [dbo].[User_UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[User_UpdateUser]
	@UserId INT,
	@Username VARCHAR,
	@Forename VARCHAR,
	@Surename VARCHAR,
	@Level SMALLINT,
	@IsActive SMALLINT
AS
	SET NOCOUNT ON

	UPDATE [User]
		SET [Username] = @Username,
		[Forename] = @Forename,
		[Surname] = @Surename,
		[Level] = @Level,
		[IsActive] = @IsActive
	FROM 
		[dbo].[User]
	WHERE
		[UserId] = @UserId
GO
PRINT N'Creating Procedure [dbo].[User_GetByUsername]...';


GO
CREATE PROCEDURE [dbo].[User_GetByUsername]
	@Username NVARCHAR(15)
AS
	SET NOCOUNT ON

	SELECT
		[UserId],
		[Username],
		[Password],
		[Forename],
		[Surname],
		[Level],
		[IsActive],
		[Picture]
	FROM 
		[dbo].[User]
	WHERE
		[Username] = @Username
GO
PRINT N'Creating Procedure [dbo].[User_GetById]...';


GO
CREATE PROCEDURE [dbo].[User_GetById]
	@UserId INT
AS
	SET NOCOUNT ON

	SELECT
		[UserId],
		[Username],
		[Password],
		[Forename],
		[Surname],
		[Level],
		[IsActive],
		[Picture]
	FROM 
		[dbo].[User]
	WHERE
		[UserId] = @UserId
GO
PRINT N'Creating Procedure [dbo].[User_GetByActive]...';


GO
CREATE PROCEDURE [dbo].[User_GetByActive]
	@IsActive BIT
AS
	SET NOCOUNT ON

	SELECT
		[UserId],
		[Username],
		[Forename],
		[Surname],
		[Level],
		[IsActive]
	FROM 
		[dbo].[User]
	WHERE
		[IsActive] = @IsActive
GO
PRINT N'Creating Procedure [dbo].[User_Create]...';


GO
CREATE PROCEDURE [dbo].[User_Create]
	@Forename	as NVARCHAR(30),
	@Surname	as NVARCHAR(30),
	@Username	as NVARCHAR(15),
	@Password	as NVARCHAR(255)

AS
	SET NOCOUNT ON

	INSERT INTO [dbo].[User]
	(
		[Forename],
		[Surname],
		[Username],
		[Password]
	)
	VALUES
	(
		@Forename,
		@Surname,
		@Username,
		@Password
	)
GO
PRINT N'Creating Procedure [dbo].[Comment_GetByTicketId]...';


GO
CREATE PROCEDURE [dbo].[Comment_GetByTicketId]
	@TicketId INT
AS
	SET NOCOUNT ON

    SELECT 
        c.[CommentId],
        c.[Content],
        c.[Created],
        c.[TicketId],
        u.[UserId],
        u.[Forename],
        u.[Surname],
        u.[Picture]
    FROM 
        [dbo].[Comment] c
        INNER JOIN [dbo].[User] u ON u.[UserId] = c.[UserId] 
    WHERE 
        c.[TicketId] = @TicketId
GO
PRINT N'Creating Procedure [dbo].[Comment_Create]...';


GO
CREATE PROCEDURE [dbo].[Comment_Create]
	@Content VARCHAR(255),
    @TicketId INT,
    @UserId INT
AS
	SET NOCOUNT ON

    INSERT INTO [dbo].[Comment]
    (
	    [Content],
        [TicketId],
        [UserId]
    )
    VALUES
    (
    	@Content,
        @TicketId,
        @UserId
    )

    SELECT * from [dbo].[Comment] WHERE CommentId = SCOPE_IDENTITY()
GO
PRINT N'Creating Procedure [dbo].[Comment_Delete]...';


GO
CREATE PROCEDURE [dbo].[Comment_Delete]
	@CommentId INT
AS
	SET NOCOUNT ON

	DELETE FROM 
		[dbo].[Comment]
	WHERE 
		[CommentId] = @CommentId
GO
PRINT N'Creating Procedure [dbo].[Comment_Update]...';


GO
CREATE PROCEDURE [dbo].[Comment_Update]
    @Content VARCHAR(255),
    @CommentId INT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Comment]
    SET
        [Content] = @Content
    WHERE
        [CommentId] = @CommentId
GO
PRINT N'Creating Procedure [dbo].[Comment_GetById]...';


GO
CREATE PROCEDURE [dbo].[Comment_GetById]
	@CommentId INT
AS
	SET NOCOUNT ON

    SELECT 
        c.[CommentId],
        c.[Content],
        c.[Created],
        c.[TicketId],
        u.[UserId],
        u.[Forename],
        u.[Surname],
        u.[Picture]
    FROM 
        [dbo].[Comment] c
        INNER JOIN [dbo].[User] u ON u.[UserId] = c.[UserId] 
    WHERE 
        c.[CommentId] = @CommentId
GO
PRINT N'Creating Procedure [dbo].[Project_DeleteAccess]...';


GO
CREATE PROCEDURE [dbo].[Project_DeleteAccess]
	@ProjectId INT
AS
	SET NOCOUNT ON

	DELETE FROM 
		[dbo].[ProjectAccess] 
	WHERE 
		[ProjectId] = @ProjectId
GO
PRINT N'Creating Procedure [dbo].[Project_GetByOwnerId]...';


GO
CREATE PROCEDURE [dbo].[Project_GetByOwnerId]
	@UserId INT
AS
	SET NOCOUNT ON

    SELECT 
        [ProjectId],
        [Name],
        [Status],
        [Active],
        [OwnerId]
    FROM 
        [dbo].[Project]
    WHERE 
        [OwnerId] = @UserId AND 
        [Active] = 1
GO
PRINT N'Creating Procedure [dbo].[Project_GetByManagerAccess]...';


GO
CREATE PROCEDURE [dbo].[Project_GetByManagerAccess]
	@ProjectId INT
AS
	SET NOCOUNT ON

    SELECT 
        p.[ProjectId],
        p.[Name],
        p.[Status],
        p.[Active],
        p.[OwnerId]
    FROM [dbo].[Project] p
        INNER JOIN [dbo].[ProjectAccess] pa ON pa.[ProjectId] = p.[ProjectId]
    WHERE 
        p.[ProjectId] = @ProjectId AND 
        [Active] = 1 AND
        pa.ManagerAccess = 1
GO
PRINT N'Creating Procedure [dbo].[Project_GetByStandardAccess]...';


GO
CREATE PROCEDURE [dbo].[Project_GetByStandardAccess]
	@ProjectId INT
AS
	SET NOCOUNT ON

    SELECT 
        p.[ProjectId],
        p.[Name],
        p.[Status],
        p.[Active],
        p.[OwnerId]
    FROM [dbo].[Project] p
        INNER JOIN [dbo].[ProjectAccess] pa ON pa.[ProjectId] = p.[ProjectId]
    WHERE 
        p.[ProjectId] = @ProjectId AND 
        [Active] = 1 AND
        pa.ManagerAccess = 0
GO
PRINT N'Creating Procedure [dbo].[Project_CreateAccess]...';


GO
CREATE PROCEDURE [dbo].[Project_CreateAccess]
    @ProjectId INT,
    @UserId INT,
    @ManagerAccess INT
AS
	SET NOCOUNT ON

    INSERT INTO [dbo].[ProjectAccess]
    (
        [ProjectId],
        [UserId],
        [ManagerAccess]
    )
    VALUES
    (
        @ProjectId,
        @UserId,
        @ManagerAccess
    )
GO
PRINT N'Creating Procedure [dbo].[Project_Update]...';


GO
CREATE PROCEDURE [dbo].[Project_Update]
    @Name VARCHAR(50),
    @Status VARCHAR(20),
    @ProjectId INT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Project]
    SET
        [Name] = @Name,
        [Status] = @Status
    WHERE
        [ProjectId] = @ProjectId

    SELECT * FROM [dbo].[Project] WHERE [ProjectId] = @ProjectId
GO
PRINT N'Creating Procedure [dbo].[Project_Delete]...';


GO
CREATE PROCEDURE [dbo].[Project_Delete]
	@ProjectId INT
AS
	SET NOCOUNT ON

    UPDATE 
        [dbo].[Project]
    SET
        [Active] = 0
    WHERE
        [ProjectId] = @ProjectId
GO
PRINT N'Creating Procedure [dbo].[Project_GetById]...';


GO
CREATE PROCEDURE [dbo].[Project_GetById]
	@ProjectId INT
AS
	SET NOCOUNT ON

    SELECT 
        [ProjectId],
        [Name],
        [Status],
        [Active],
        [OwnerId]
    FROM 
        [dbo].[Project]
    WHERE 
        [ProjectId] = @ProjectId AND 
        [Active] = 1
GO
PRINT N'Creating Procedure [dbo].[Project_Create]...';


GO
CREATE PROCEDURE [dbo].[Project_Create]
	@Name VARCHAR(50),
    @ProjectId INT
AS
	SET NOCOUNT ON

    INSERT INTO [dbo].[Project]
    (
        [Name],
        [ProjectId]
    )
    VALUES
    (
        @Name,
        @ProjectId
    )

    SELECT * from [dbo].[Project] WHERE ProjectId = SCOPE_IDENTITY()
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
